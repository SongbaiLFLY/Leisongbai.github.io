<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A casual Blog</title>
  
  <subtitle>My&#39;casual life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leisongbai.github.io/"/>
  <updated>2019-09-16T09:50:30.045Z</updated>
  <id>http://leisongbai.github.io/</id>
  
  <author>
    <name>Casual_L</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django中redis的使用</title>
    <link href="http://leisongbai.github.io/2019/09/16/python%E4%B8%AD%E5%85%B3%E4%BA%8Eredis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://leisongbai.github.io/2019/09/16/python中关于redis的使用/</id>
    <published>2019-09-16T08:59:45.000Z</published>
    <updated>2019-09-16T09:50:30.045Z</updated>
    
    <content type="html"><![CDATA[<p>在最近做的一个项目中,主要使用的redis,而项目中主要使用的是Django<br>所以主要总结一下django关于redis使用的一些库和方法</p><h2 id="一-django-redis库"><a href="#一-django-redis库" class="headerlink" title="一.django_redis库"></a>一.django_redis库</h2><p>Django 版本支持<br>&ensp;&ensp;django-redis 3.8.x 支持 django 1.4, 1.5, 1.6, 1.7 (或许会有 1.8)<br>&ensp;&ensp;django-redis 4.4.x 支持 django 1.6, 1.7, 1.8, 1.9 和 1.10<br>&ensp;&ensp;Redis Server 支持<br>&ensp;&ensp;django-redis 3.x.y 支持 redis-server 2.6.x 或更高<br>&ensp;&ensp;django-redis 4.x.y 支持 redis-server 2.8.x 或更高</p><p>1.安装<br>&ensp;&ensp;pip install django-redis <br>2.作为 cache backend 使用配置<br>&ensp;&ensp;为了使用 django-redis , 你应该将你的 django cache setting 改成这样:</p><pre><code>CACHES = {    &quot;default&quot;: {       &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,       &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,       &quot;OPTIONS&quot;: {       &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,           }              }                   }</code></pre><p>这只是最基本的配置,详情请查阅官方文档<a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">https://django-redis-chs.readthedocs.io/zh_CN/latest/</a></p><p>3.使用</p><pre><code>from django_redis import get_redis_connectioncoon = get_redis_connection() </code></pre><h2 id="二-redis库"><a href="#二-redis库" class="headerlink" title="二.redis库"></a>二.redis库</h2><p>在这个库中包含了许多redis的相关方法,使用起来非常方便,但只有一个缺点吧,就是连接</p><pre><code>import redis连接池pool = redis.ConnectionPool(host=&apos;127.0.0.1&apos;,port=6379)从池子里拿一个连接coon = redis.Redis(connection_pool=pool)coon.hset(&apos;people&apos;,&apos;age&apos;,&apos;24&apos;)coon.hset(&apos;people&apos;,&apos;name&apos;,&apos;yangjing&apos;)coon.hset(&apos;people&apos;,&apos;height&apos;,&apos;158&apos;)</code></pre><p>redis.py 默认在执行每一次请求都会创建（连接池申请连接）和断开（归还连接池）一次连续操作，如果想要在一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次（）事务pipline都是原子性（都成功或都不成功）操作。</p><pre><code>import redis事务coon = redis.Redis(host=&apos;127.0.0.1&apos;,port=6379)拿到一个管道，transaction、pi = coon.pipeline(transaction=True)说明是批量命令pi.multi()pi.set(&apos;author&apos;,&apos;作者&apos;)pi.set(&apos;publish&apos;,&apos;出版社&apos;)执行pi.execute()</code></pre><h2 id="三-django-core-cache"><a href="#三-django-core-cache" class="headerlink" title="三.django.core.cache"></a>三.django.core.cache</h2><p>要使用redis的ttl,我是只找到这一个方法,毕竟学得还太少吧.</p><pre><code>cache.set(&quot;foo&quot;, &quot;bar&quot;, timeout=22)cache.ttl(&quot;foo&quot;)</code></pre><p>这些库中的具体方法并没有给出,毕竟比较多,希望自己去查找吧.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在最近做的一个项目中,主要使用的redis,而项目中主要使用的是Django&lt;br&gt;所以主要总结一下django关于redis使用的一些库和方法&lt;/p&gt;
&lt;h2 id=&quot;一-django-redis库&quot;&gt;&lt;a href=&quot;#一-django-redis库&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://leisongbai.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redis" scheme="http://leisongbai.github.io/tags/redis/"/>
    
      <category term="django" scheme="http://leisongbai.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>关于pythonanywhere环境下的部署</title>
    <link href="http://leisongbai.github.io/2019/09/12/pythonanywhere/"/>
    <id>http://leisongbai.github.io/2019/09/12/pythonanywhere/</id>
    <published>2019-09-12T09:56:50.327Z</published>
    <updated>2019-09-12T06:24:55.219Z</updated>
    
    <content type="html"><![CDATA[<p> 1.通过File上传项目的压缩文件</p><img src="/2019/09/12/pythonanywhere/1.png"> <a id="more"></a><img src="/2019/09/12/pythonanywhere/2.png"><p> 2.解压</p><ol start="3"><li><p>环境配置</p><img src="/2019/09/12/pythonanywhere/3.png"></li><li><p>执行 pip install -r requeirments.txt安装依赖包</p></li><li><p>创建数据库，并根据数据库名配置django的setting文件</p></li><li><p>执行python manage.py  makemigrations产生迁移文件，<br> 执行python manage.py migrate 生成表</p></li><li><p>数据库配置</p><img src="/2019/09/12/pythonanywhere/4.png"></li><li><p>web配置</p><img src="/2019/09/12/pythonanywhere/6.png"><img src="/2019/09/12/pythonanywhere/5.png"></li><li><p>关于路径的配置</p><img src="/2019/09/12/pythonanywhere/7.png"><p>重新加载web, 最后记得在3个月内点击1次，否则网站会自动回收资源</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 1.通过File上传项目的压缩文件&lt;/p&gt;
&lt;img src=&quot;/2019/09/12/pythonanywhere/1.png&quot;&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://leisongbai.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="django" scheme="http://leisongbai.github.io/tags/django/"/>
    
      <category term="mysql" scheme="http://leisongbai.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
